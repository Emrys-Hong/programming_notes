FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04

MAINTAINER Sujoy Roy <sujoy.roy@sap.com>

ENV http_proxy http://proxy.wdf.sap.corp:8080
ENV https_proxy http://proxy.wdf.sap.corp:8080
ENV HTTP_PROXY http://proxy.wdf.sap.corp:8080
ENV HTTPS_PROXY http://proxy.wdf.sap.corp:8080
ENV no_proxy .local,169.254/16,*.sap.corp,*.corp.sap,.sap.corp,.corp.sap,localhost,nexus
ENV NO_PROXY .local,169.254/16,*.sap.corp,*.corp.sap,.sap.corp,.corp.sap,localhost,nexus

RUN apt-get update && apt-get install -y \
        vim \
        libtbb2 \
        libtbb-dev \
        build-essential \
        curl \
        cmake \
        git \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        zlib1g-dev \
        libwebp-dev \
        libopenexr-dev \
        libgdal-dev \
        mlocate \
        pkg-config \
        python \
        python-dev \
        python-numpy \
        python-pip \
        libopencv-dev \
        python-opencv \
        python-tk \
        python3-tk \
        rsync \
        software-properties-common \
        unzip \
        swig \
        zip \
        zlib1g-dev \
        libcurl3-dev \
        openjdk-8-jdk\
        openjdk-8-jre-headless \
        libjpeg8-dev \
        #libtiff4-dev \
        libjasper-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libv4l-dev \
        libatlas-base-dev \
        gfortran \
        libhdf5-dev \
        qt5-default \
        libvtk6-dev \
        wget \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*


RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

RUN pip --no-cache-dir install \
        Pillow \
        h5py \
        ipykernel \
        jupyter \
        matplotlib \
        numpy \
        easydict \
        Flask \
        scikit-image \
        pandas \
        scipy \
        sklearn \
        keras==2.0.8 \
        opencv-python \
        && \
    python -m ipykernel.kernelspec

# Install TensorFlow GPU version.
RUN pip --no-cache-dir install \
    http://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.1-cp27-none-linux_x86_64.whl
# --- ~ DO NOT EDIT OR DELETE BETWEEN THE LINES --- #

# RUN ln -s /usr/bin/python3 /usr/bin/python#

# Set up our notebook config.
COPY jupyter_notebook_config.py /root/.jupyter/

# Copy sample notebooks.
# COPY notebooks /notebooks

# Jupyter has issues with being run directly:
#   https://github.com/ipython/ipython/issues/7062
# We just add a little wrapper script.
COPY run_jupyter.sh /

## For CUDA profiling, TensorFlow requires CUPTI.
#ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

# Set up grpc

#RUN pip install mock grpcio

# Install OpenCV
RUN wget https://github.com/opencv/opencv/archive/3.2.0.zip && \
    unzip 3.2.0.zip && \
    rm 3.2.0.zip && \
    mv opencv-3.2.0 OpenCV && \
    cd OpenCV && \
    mkdir build && \
    cd build && \
    cmake -D WITH_QT=ON \
        -D WITH_OPENGL=ON \
        -D WITH_CUDA=OFF \
        #-D FORCE_VTK=ON \
        #-D WITH_TBB=ON \
        #-D WITH_GDAL=ON \
        #-D WITH_XINE=ON \
        -D BUILD_EXAMPLES=ON .. && \
    make -j"$(nproc)"  && \
    make install && \
    ldconfig && \
    echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc

# Set up Bazel.

#ENV BAZELRC /root/.bazelrc
## Install the most recent bazel release.
#ENV BAZEL_VERSION 0.5.4
#WORKDIR /
#RUN mkdir /bazel && \
#    cd /bazel && \
#    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
#    curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
#    chmod +x bazel-*.sh && \
#    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
#    cd / && \
#    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
#
## CUDNN files need to be copied to usr/local/cuda-9.0
#RUN cp /usr/lib/x86_64-linux-gnu/libcudnn.so.6 /usr/local/cuda-8.0/lib64/
#RUN cp /usr/lib/x86_64-linux-gnu/libcudnn.so.6 /usr/local/cuda-8.0/
#
#ENV TF_NEED_CUDA=1
#
# TensorBoard
EXPOSE 6006
# IPython
EXPOSE 8888

CMD ["/bin/bash"]
